VER: CalcRMI (Aula7) , Hello (Aula8), PrepFreq1, PrepFreq2, MultiThreadAlunos



Quais as diferenças entre um sistema de memória distribuida e um sistema de memória partilhada?

Um sistema de memória distribuída consiste em nós ou computadores interconectados em uma rede, onde cada nó possui sua própria memória 
local e o acesso a dados em outros nós requer comunicação explícita. Em contraste, em um sistema de memória compartilhada, todos os 
processadores têm acesso direto a um espaço de endereço de memória compartilhado, permitindo acesso simultâneo aos dados. Na memória 
distribuída, os dados são compartilhados através de troca de mensagens ou chamadas de procedimento remoto, enquanto na memória compartilhada 
não é necessário comunicação explícita para acessar a memória de outros processadores. Além disso, a coerência de cache é necessária em sistemas
 de memória compartilhada para manter a consistência dos dados, enquanto a escalabilidade é uma vantagem dos sistemas de memória distribuída,
 mas pode envolver latência de rede. Em resumo, a principal diferença está na organização e no acesso à memória, bem como na forma como os dados
 são compartilhados e sincronizados entre os diferentes nós ou processadores.




Compare o modelo de uma aplicação que comunica diretamente por Sockets com uma aplicação que comunica através de Objetos Remotos (Java RMI)

A comunicação por Sockets é uma abordagem de nível baixo, onde você lida diretamente com fluxos de entrada e saída. Já o Java RMI é uma 
abstração de nível mais alto, permitindo invocação remota de objetos. A comunicação por Sockets exige serialização manual de objetos, 
enquanto o Java RMI trata disso automaticamente. O modelo de programação do Sockets é cliente-servidor, enquanto o Java RMI é orientado 
a objetos. A descoberta de serviços é feita manualmente nos Sockets, mas o Java RMI possui um registro para localização automática de 
objetos remotos. O tratamento de exceções é mais conveniente no Java RMI. A comunicação por Sockets é mais flexível, mas requer mais 
esforço de implementação, enquanto o Java RMI é mais fácil de usar devido à sua infraestrutura embutida.



No contexto de Java RMI, para que serve um Factory?

Um Factory em Java RMI é usado para criar instâncias de objetos remotos de forma encapsulada. Ele oculta a complexidade da criação 
e fornece uma interface simples para o cliente. Um Factory oferece flexibilidade na criação de objetos remotos, permitindo lógica 
personalizada. Ele facilita a evolução do sistema, pois alterações podem ser feitas no Factory sem afetar o código do cliente. 
A lógica de criação é centralizada em uma única classe, simplificando sua gestão. Em resumo, um Factory em Java RMI abstrai a 
criação de objetos remotos, oferece flexibilidade, facilita a evolução e centraliza a lógica de criação.




No contexto de Java Enterprise Edition, o que é e para que serve uma Entity?

No contexto do Java EE, uma entidade é uma classe que representa um objeto de negócio persistente. Ela é mapeada para uma tabela 
em um banco de dados relacional e é usada para armazenar e manipular dados. As entidades são anotadas com metadados especiais, 
com @Entity, para indicar sua mapeabilidade. Por meio de APIs de persistência, como o JPA, é possível realizar operações de 
persistência, consulta e manipulação nos dados da entidade. As entidades permitem que os desenvolvedores trabalhem com os dados
de forma orientada a objetos, simplificando o acesso e manipulação dos dados persistentes em aplicativos Java EE.




Explique o que é e para que serve a serialização de uma estrutura de dados.

A serialização de uma estrutura de dados envolve a conversão dessa estrutura em uma sequência de bytes para armazenamento, 
comunicação ou transferência de dados. Ela permite que os objetos sejam compactados e convertidos em uma forma independente 
da linguagem de programação. A serialização é útil para armazenar o estado de um programa, transmitir dados entre sistemas 
distribuídos, superar barreiras de linguagem e trocar dados em formatos padronizados. Além disso, pode ser usada para caching 
e otimização de desempenho. É importante garantir que os objetos sejam serializáveis e que a segurança seja considerada. 
Em resumo, a serialização facilita o compartilhamento e a persistência de dados, convertendo-os em uma forma compacta e transferível.




Qual a(s) diferença(s) entre invocar um método remoto e invocar um web service?

Protocolo de comunicação: Um método remoto geralmente utiliza um protocolo específico para comunicação, como o RMI (Remote Method Invocation), 
enquanto um web service utiliza protocolos baseados em padrões da web, como SOAP (Simple Object Access Protocol) ou REST (Representational State 
Transfer).

Independência de plataforma: Um web service é projetado para ser independente de plataforma, permitindo que diferentes sistemas possam interagir 
de forma interoperável. Já um método remoto pode ser mais específico para uma plataforma ou tecnologia.

Descoberta e registro: Web services geralmente fornecem recursos para descoberta e registro, onde os serviços são anunciados e encontrados em
um diretório centralizado. Os métodos remotos normalmente não têm essa funcionalidade embutida.

Flexibilidade e escalabilidade: Web services são altamente flexíveis e escaláveis, permitindo que diferentes clientes possam acessar os mesmos 
serviços de maneira eficiente. Métodos remotos podem ser menos flexíveis e escaláveis, dependendo da tecnologia utilizada.

Padrões de comunicação: Web services são baseados em padrões amplamente aceitos, o que facilita a integração com diferentes sistemas. 
Métodos remotos podem ter padrões mais específicos, dependendo da tecnologia utilizada.



Qual a diferença entre as semânticas perante falhas “at-least-once” e “at-most-once”?

Semântica "at-least-once":
Na semântica "at-least-once", o objetivo é garantir que uma operação seja executada pelo menos uma vez. Isso significa que o sistema 
fará todos os esforços para garantir que a operação seja entregue e executada, mesmo que isso resulte em possíveis duplicações. 
Se uma falha ocorrer durante o processo de entrega, o sistema pode retransmitir a operação para garantir que ela seja processada 
pelo destinatário. Essa abordagem prioriza a entrega da operação, mesmo que isso possa levar a duplicações no processamento.

Semântica "at-most-once":
Na semântica "at-most-once", o objetivo é garantir que uma operação seja executada no máximo uma vez, sem duplicações. 
Nesse caso, o sistema toma medidas para evitar a repetição de operações, mesmo que isso possa levar à perda de alguma operação 
em caso de falha. A identificação única das operações e a verificação de duplicatas são aplicadas para garantir que cada operação
 seja processada apenas uma vez, evitando assim possíveis efeitos colaterais ou resultados indesejados.




Stateful Session Bean (SFSB):
Um SFSB é um componente de sessão que mantém o estado associado a uma única instância de cliente durante toda a duração da sessão. 
Em outras palavras, ele mantém o estado específico do cliente entre várias chamadas de método. O contêiner Java EE garante que todas 
as chamadas subsequentes do cliente sejam direcionadas à mesma instância do bean. Isso permite que o bean mantenha informações 
personalizadas para o cliente, como dados de carrinho de compras em um aplicativo de comércio eletrônico ou informações de login 
em um aplicativo de gerenciamento de usuários.
Os SFSBs são úteis quando há a necessidade de manter o estado do cliente ao longo de várias interações, mas eles também têm algumas 
considerações adicionais, como a necessidade de gerenciar adequadamente o ciclo de vida da sessão e garantir a consistência do estado.

Stateless Session Bean (SLSB):
Um SLSB é um componente de sessão que não mantém estado associado a uma instância específica do cliente. Cada chamada de método para um 
SLSB é independente das chamadas anteriores e subsequentes. O contêiner Java EE pode direcionar chamadas de clientes diferentes para 
instâncias diferentes do bean, conforme necessário, para lidar com a carga de trabalho.
Os SLSBs são geralmente usados para operações que não exigem o armazenamento de estado entre as chamadas, como serviços de negócios 
que realizam cálculos ou operações de acesso a banco de dados. Eles são leves e eficientes, pois não precisam lidar com a sobrecarga 
de manter o estado do cliente.




Em sistemas distribuídos, um sistema síncrono segue um relógio global compartilhado, com operações executadas em momentos sincronizados. 
O tempo de resposta é previsível, mas a ordem das operações é sequencial e a flexibilidade e tolerância a falhas são limitadas.
Um sistema síncrono é mais fácil de projetar e analisar, enquanto um sistema assíncrono é mais flexível e resiliente a falhas. 
A sincronia oferece uma estrutura clara, mas pode limitar a adaptabilidade. A assincronia permite ajustes a atrasos e indisponibilidades, 
mas torna o projeto e análise mais complexos. Um exemplo de sistema síncrono em um contexto distribuído seria um sistema de transações bancárias. 
Nesse sistema, as operações de transferência de dinheiro entre contas devem ocorrer em uma ordem sequencial e coordenada. Cada operação depende 
do saldo atual das contas envolvidas e é executada em etapas bem definidas, seguindo um relógio global compartilhado. Isso garante que as operações 
sejam executadas corretamente e que o saldo final seja consistente.

Já um sistema assíncrono não possui relógio global e as operações ocorrem de forma independente, por meio de comunicação assíncrona. 
A ordem das operações é não determinística e o tempo de resposta pode variar. No entanto, a flexibilidade e tolerância a falhas são maiores.
A escolha entre um sistema síncrono e assíncrono depende das necessidades do sistema e das características desejadas, como previsibilidade, 
flexibilidade e tolerância a falhas. Ambos os tipos têm vantagens e desvantagens específicas. Um exemplo de sistema assíncrono em um 
contexto distribuído seria uma rede social em que os usuários podem publicar mensagens e comentários. Nesse sistema, as operações de 
publicação e comentário podem ocorrer em qualquer ordem, sem depender de uma sincronização rígida. Cada usuário pode interagir independentemente, 
enviando suas mensagens e comentários por meio de comunicação assíncrona. Não há necessidade de uma ordem estrita das operações, e o tempo de 
resposta pode variar dependendo do tráfego da rede e do desempenho dos servidores.




Os sistemas de bancos de dados SQL e NoSQL diferem em vários aspectos.

Os bancos de dados SQL são estruturados em tabelas com esquemas definidos, enquanto os bancos de dados NoSQL têm modelos de dados flexíveis, como documentos, colunas, grafos ou pares chave-valor.
Os bancos de dados SQL são escalados verticalmente, adicionando recursos a um único servidor, enquanto os bancos de dados NoSQL são escalados horizontalmente, distribuindo a carga em vários servidores.
Os bancos de dados SQL são mais adequados para aplicações com requisitos de integridade de dados rígidos, enquanto os bancos de dados NoSQL são mais flexíveis e priorizam a disponibilidade e escalabilidade.
Os bancos de dados SQL são comumente usados em aplicativos tradicionais de negócios, enquanto os bancos de dados NoSQL são usados em aplicativos da web, móveis, análise de big data e IoT.
A escolha entre SQL e NoSQL depende das necessidades específicas do aplicativo em termos de consistência, escalabilidade e flexibilidade.
Ambos os sistemas têm suas vantagens e desvantagens, e a seleção adequada depende dos requisitos do projeto e do tipo de dados a serem armazenados e acessados.




A computação em nuvem possui as seguintes características principais:

Acesso remoto através da Internet.
Escalabilidade rápida e fácil.
Virtualização de recursos físicos.
Elasticidade na alocação dinâmica de recursos.
Modelos de serviço: IaaS, PaaS e SaaS.
Compartilhamento de recursos entre usuários.
Redução de custos por meio da utilização eficiente de recursos.
Disponibilidade e acessibilidade em qualquer lugar.
Backup e recuperação de dados simplificados.
Atualizações e manutenção centralizadas.
Integração com outras tecnologias e serviços.
Pagamento por uso, oferecendo flexibilidade financeira.
Gerenciamento centralizado de recursos.
Colaboração e compartilhamento de informações facilitados.
Maior agilidade e capacidade de inovação para as organizações.




Diga o que é um callback em Java RMI.

Em Java RMI (Remote Method Invocation), um "callback" refere-se a uma técnica em que um objeto remoto permite que o cliente chame de volta 
(callback) métodos definidos no cliente. Isso permite que o objeto remoto envie informações ou notificações assíncronas para o cliente.
Normalmente, em uma chamada de método RMI, o cliente invoca um método em um objeto remoto e espera pela resposta. No entanto, em certos 
cenários, é necessário que o objeto remoto inicie uma comunicação com o cliente, em vez de esperar por uma solicitação do cliente. Aqui 
é onde entra o callback.O callback em Java RMI é implementado utilizando uma interface. O cliente registra sua implementação da interface
 com o objeto remoto. O objeto remoto, então, pode chamar os métodos definidos na interface do callback para notificar o cliente sobre 
eventos ou compartilhar informações.Por exemplo, suponha que você tenha um servidor RMI que monitora o status de um processo em tempo real. 
O cliente pode registrar um objeto de callback que implementa uma interface com métodos como "onProcessStarted" e "onProcessCompleted". 
Quando o processo começar ou terminar, o servidor RMI pode chamar os métodos correspondentes no objeto de callback do cliente para notificá-lo
 sobre esses eventos.O callback em Java RMI é uma poderosa técnica que permite a comunicação bidirecional entre objetos remotos e clientes, 
tornando possível a transmissão assíncrona de informações e notificações.




Diga o que é o protocolo pedido-resposta e identifique as operações que o implementam:

O protocolo pedido-resposta é um modelo de comunicação entre um cliente e um servidor. O cliente envia uma solicitação ao servidor, 
contendo informações sobre a operação desejada. O servidor recebe a solicitação, processa a operação e envia uma resposta de volta ao cliente.
 O protocolo é síncrono, o que significa que o cliente aguarda a resposta antes de continuar sua execução. Existem várias implementações 
desse protocolo, como o HTTP, que é usado na web para comunicação entre navegadores e servidores web. O RPC permite a execução remota de 
procedimentos em um servidor, enquanto o SMTP é usado para enviar e-mails entre servidores. A escolha do protocolo depende das necessidades 
e requisitos da aplicação em questão.




No contexto da linguagem java, explique a diferença entre um lock de classe e um
lock de objeto.

Em resumo, a diferença entre um lock de classe e um lock de objeto está na granularidade do bloqueio. Um lock de classe sincroniza o acesso 
a um método estático em toda a classe, enquanto um lock de objeto sincroniza o acesso a um método não estático em uma instância específica 
do objeto. A escolha entre os dois tipos de lock depende dos requisitos específicos do programa e da forma como os recursos compartilhados 
devem ser acessados de forma segura em um ambiente concorrente.




Explique porque razao se diz que um sistema distribuido é concorrente, heterogéneo e assíncrono?

Concorrente: Um sistema distribuído envolve a interação simultânea de vários componentes independentes, como computadores, servidores, dispositivos de armazenamento e nós de rede. 
Esses componentes podem executar tarefas diferentes e, muitas vezes, competir por recursos compartilhados. A concorrência surge quando múltiplos processos ou threads estão sendo 
executados em paralelo, e há a necessidade de coordenar e sincronizar suas ações para evitar conflitos e garantir a consistência dos dados. A concorrência é uma característica 
fundamental em sistemas distribuídos para otimizar o desempenho, permitir a escalabilidade e a utilização eficiente dos recursos disponíveis.

Heterogêneo: Um sistema distribuído geralmente é composto por diferentes tipos de hardware, sistemas operacionais, linguagens de programação, protocolos de comunicação e arquiteturas. 
Essa diversidade de componentes é o que torna o sistema heterogêneo. Os dispositivos podem variar em termos de poder de processamento, capacidade de armazenamento, velocidade da rede 
e outras características. A heterogeneidade apresenta desafios adicionais para o desenvolvimento e o gerenciamento de sistemas distribuídos, pois é necessário garantir a interoperabilidade
 entre os componentes heterogêneos, lidar com questões de compatibilidade e ajustar o comportamento do sistema para acomodar as diferenças nos recursos disponíveis.

Assíncrono: Em um sistema distribuído, os componentes independentes podem operar em ritmos diferentes e em diferentes momentos. A comunicação entre esses componentes ocorre por meio 
de troca de mensagens, e não há uma noção global de tempo compartilhada. Isso significa que não há uma garantia de que uma mensagem seja recebida imediatamente após ser enviada ou 
que as operações sejam executadas em ordem sequencial. Os atrasos na rede, falhas de comunicação ou atrasos na resposta dos componentes podem causar comportamentos assíncronos no sistema.
A natureza assíncrona dos sistemas distribuídos torna necessário lidar com problemas de coordenação, sincronização e consistência de dados.




Explique como funcionam os métodos notify() e wait() em Java.

O método notify() é usado para notificar uma thread em espera de que uma determinada condição tenha ocorrido e que ela pode continuar sua execução. Para chamar o método notify(), 
é necessário obter o monitor do objeto no qual a thread está esperando usando a palavra-chave synchronized. 
O método wait() é usado por uma thread para aguardar até que outra thread notifique-a de que uma condição específica foi atendida. A thread chamadora deve adquirir o monitor do 
objeto antes de chamar o método wait(). Quando o método wait() é chamado, a thread atual libera o monitor e entra em um estado de espera. A thread permanecerá em espera até que 
outra thread chame notify() ou notifyAll() no mesmo objeto monitorado.

class Processo {
    public void executar() {
        synchronized (this) {
            System.out.println("Iniciando o processo...");

            try {
                // Aguardar até que seja notificado
                wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            // Continuar a execução após ser notificado
            System.out.println("Processo concluído.");
        }
    }

    public void notificar() {
        synchronized (this) {
            System.out.println("Notificando o processo...");
            
            // Notificar a thread em espera
            notify();
        }
    }
}

public class ExemploNotifyWait {
    public static void main(String[] args) {
        Processo processo = new Processo();

        // Thread para executar o processo
        Thread threadProcesso = new Thread(() -> {
            processo.executar();
        });

        // Thread para notificar o processo após 3 segundos
        Thread threadNotificacao = new Thread(() -> {
            try {
                Thread.sleep(3000);
                processo.notificar();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });

        // Iniciar as threads
        threadProcesso.start();
        threadNotificacao.start();

        try {
            // Aguardar até que as threads terminem
            threadProcesso.join();
            threadNotificacao.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("Programa finalizado.");
    }
}

_________________________________________________

Exercício da tabela:

Supondo que temos:

public class Exemplo {
	private static int a;
	private int b;
	private static synchronized void m1(){...};
	private synchronized void m2(){...};
	public void m3(){...};
}

Exemplo o1 = new Exemplo();
Exemplo o2 = new Exemplo();

Indique se os métodos a seguir invocados estão ou não em exclusão mútua:

a) o1.m1() e o2.m1(), sim, adquirem o lock da classe devido ao "static synchronized", embora sejam objetos diferentes

b) o1.m3() e o2.m3(), não, não têm "synchronized" e estão a ser executados em objetos diferentes.

c) o1.m2() e o2.m2(), não, pois têm "synchronized", ou seja, adquirem o lock do objeto e neste caso as chamadas são de objetos diferentes.

d) o1.m2() e o2.m3(), não, pois são métodos diferentes.

e) o1.m2() e o1.m2(), sim, pois têm "synchronized", ou seja, adquirem o lock do objeto e neste caso ambas as chamadas são no mesmo objeto.

_________________________________________________


Sockets:

public class Client {
	private Socket s;
	
	public Client() {
		s = new Socket(ipServer, portaServer);
		ObjectInputStream is = new Object InputStream(s.getInputStream());
		ObjectOutputStream os = new Object OutputStream(s.getOutputStream());
		int option = 0;
		while(option != 3){
			...
			option = Ler.umint();
			os.writeObject(option);
			os.flush();
			System.out.println(is.readObject());
		}
		s.close();
	}

	public static void main (String args[]){
		Client c = new Client();
	}	
}

public class Server {
	private ServerSOcket ss;
	private Socket cs;
	private Connection c;
	private int numConnections;
	
	public Server () {
		this.numConnections = 0;
		ss = new ServerSocket(portaServer);
		
		while(true){
			numConnections++;
			cs = ss.accept();
			c = new Connection (cs, numConnections);
		}
	} 

	public static void main (String args []){
		Server server = new Server();
	}
}

public class Connection extends Thread {
	private Socket cs;
	private int numConnections;

	public Connection (Socket cs, int numConnections) {
		super();
		this.cs = cs;
		this.numConnections = numConnections;
		start();
	}

	public void run(){
		ObjectInputStream is = new Object InputStream((this.s).getInputStream());
		ObjectOutputStream os = new Object OutputStream((this.s).getOutputStream());

		int choice;
		while((choice = (int) is.readObject()) != 3){
			if (choice == 1) {os.writeObject();};
			else if (choice == 2) {os.writeObject();};
		}
		os.flush();
	}
}

_________________________________________________


JAVA RMI and callbacks:


public class Server () {
	public static void main (String args []){
		registry.LocateRegistry.createRegistry(1099);
		ServerInterface objRemoto = new ServerImpl();
		Naming.rebind("server", objRemoto);
	}
}

public interface ServerInterface extends Remote {
	public void inscrever (ClienteInterface c) throws RemoteExeption;
}

public class ServerImpl extends UnicastRemoteObject implements ServerInterface {
	private List<ClienteInterface> inscritos;

	public ServerImpl () {
		super();
		inscritos = new ArrayList<>();
	}

	public void inscrever (ClienteInterface c) throws RemoteExeption {
		(this.inscritos).add(c);
		if(inscritos.size() >= limite){
			for (ClienteInterface inscrito : inscritos){
				inscrito.printOnClient("...");
			}
		}
	}
}

public class Cliente {
	public static void main(String[] args){
		LocateRegistry.getRegistry(ipServer, 1099);
		ServerInterface s = (ServerInterface) Naming.Lookup("server");
		ClienteImpl c = new ClienteImpl("nome");
		s.inscrever(c);
	}
}

public interface ClienteInterface extends Remote {
	public void printOnClient (String s) throws RemoteExeption;
	public String getName () throws RemoteExeption;
}

public class ClienteImpl extends UnicastRemoteObject implements ClienteInterface {
	String nome;

	public ClienteImpl (String nome) {
		super();
		this.nome = nome;
	}	

	public void printOnClient (String s) throws RemoteExeption {
		...
	}

	public String getName () throws RemoteExeption {
		...
	}
}



